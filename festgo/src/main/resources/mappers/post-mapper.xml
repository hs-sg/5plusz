<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oplusz.festgo.repository.PostDao">

    <!-- 게시글 목록 조회 -->
    <select id="selectOrderByIdDesc" resultType="Post">
        SELECT * FROM post ORDER BY po_id DESC
    </select>

    <!-- 특정 게시글 조회(조회수 증가 후 반환) -->
    <select id="selectById" parameterType="int" resultType="Post">
        SELECT * FROM post WHERE po_id = #{poId}
    </select>

    <!-- 조회수 증가 -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE post SET po_views = po_views + 1 WHERE po_id = #{poId}
    </update>

    <!-- 게시글 생성 -->
    <insert id="insert" parameterType="PostCreateDto" useGeneratedKeys="true"
        keyProperty="poId" keyColumn="po_id">
        INSERT INTO post (po_title, po_content, po_author, pc_id, po_created_time, po_modified_time)
        VALUES (#{poTitle}, #{poContent}, #{poAuthor}, #{pcId}, systimestamp, systimestamp)
    </insert>

    <!-- 첨부파일 저장 -->
    
<insert id="insertAttachment" parameterType="java.util.List">
    <foreach collection="list" item="attachment" separator=";">
        INSERT INTO post_attachment (po_id, pa_attachments) VALUES (#{attachment.poId}, #{attachment.paAttachments})
    </foreach>
</insert>
    
    <!-- 첨부파일 불러오기 -->
    <select id="selectAttachmentsByPostId" resultType="string">
    SELECT PA_ATTACHMENTS
    FROM post_attachment
    WHERE po_id = #{poId}
    </select>

    <!-- 게시글 수정 -->
    <update id="update" parameterType="PostUpdateDto">
        UPDATE post 
        SET po_title = #{poTitle}, 
            po_content = #{poContent}, 
            po_modified_time = systimestamp
        WHERE po_id = #{poId}
    </update>

    <!-- 첨부파일 삭제 -->
<delete id="deleteAttachmentsByIds" parameterType="java.util.List">
    DELETE FROM post_attachment
    WHERE pa_id IN
    <foreach item="paId" collection="ids" open="(" separator="," close=")" >
        #{paId}
    </foreach>
</delete>

    <!-- 게시글 삭제 -->
    <delete id="deleteById" parameterType="java.lang.Integer">
        DELETE FROM post WHERE po_id = #{poId}
    </delete>

    <!-- 특정 게시글의 모든 첨부파일 삭제 (게시글 삭제 전 실행) -->
    <delete id="deleteAttachmentsByPostId" parameterType="java.lang.Integer">
        DELETE FROM post_attachment WHERE po_id = #{poId}
    </delete>

    
     <!-- 게시글 목록 조회 (공지사항만) -->
    <select id="selectNotices" resultType="com.oplusz.festgo.domain.Post">
        SELECT *
        FROM post
        WHERE pc_id = 2
        ORDER BY po_id DESC
    </select>

   <!-- 게시글 목록 조회 (공지사항 우선, 페이징) -->
        <select id="selectPagedPosts" parameterType="map" resultType="com.oplusz.festgo.domain.Post">
            SELECT *
            FROM (
                SELECT 
                    a.*, 
                    ROWNUM rn
                FROM (
                    SELECT *
                    FROM post
                    WHERE pc_id != 2  <!-- 공지사항 제외 -->
                    ORDER BY po_created_time DESC
                ) a
                WHERE ROWNUM <![CDATA[<=]]> #{endRow}
            )
            WHERE rn >= #{startRow}
        </select>
        
    <!-- 일반 게시글만 페이징 처리하여 조회 -->
        <select id="selectPagedNormalPosts" resultType="Post">
            SELECT *
            FROM (
                SELECT post.*, ROWNUM AS rn
                FROM post 
                WHERE pc_id != 2  <!-- pc_id가 2가 아닌 글들만 -->
                ORDER BY pc_id DESC, po_created_time DESC
            )
            WHERE rn BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
        </select>
        
    <!-- 일반 게시글 수 카운트 -->
        <select id="countPosts" resultType="int">
            SELECT COUNT(*)
            FROM post
            WHERE pc_id != 2
        </select>
    
    <!-- 검색 및 페이징 처리 -->
    <select id="searchWithPaging" parameterType="map" resultType="com.oplusz.festgo.domain.Post">
        SELECT *
        FROM post
        WHERE 1=1
        <if test="category != null and keyword != null">
            <choose>
                <when test='category == "t"'>
                    AND po_title LIKE '%' || #{keyword} || '%'
                </when>
                <when test='category == "c"'>
                    AND po_content LIKE '%' || #{keyword} || '%'
                </when>
                <when test='category == "tc"'>
                    AND (po_title LIKE '%' || #{keyword} || '%' OR po_content LIKE '%' || #{keyword} || '%')
                </when>
                <when test='category == "a"'>
                    AND po_author LIKE '%' || #{keyword} || '%'
                </when>
            </choose>
        </if>
        ORDER BY po_id DESC
        OFFSET #{startRow, jdbcType=INTEGER} ROWS FETCH NEXT #{pageSize, jdbcType=INTEGER} ROWS ONLY
    </select>
    <!-- resultType을 PostAttachment로 지정하여 PostAttachment 객체로 매핑하도록 설정 -->
    <select id="selectAttachmentsByPostIdWithObject" resultType="PostAttachment">
	  SELECT PA_ID, PO_ID, PA_ATTACHMENTS
	  FROM post_attachment
	  WHERE po_id = #{poId}
	</select>
<!-- 희성 작성 시작 -->

    <!-- 검색된 게시글 개수 -->
    <select id="countSearchResults" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM post
        <where>
            <trim prefixOverrides="AND">
                <if test="category != null and keyword != null">
                    <choose>
                        <when test='category == "t"'>
                            AND UPPER(po_title) LIKE '%' || UPPER(#{keyword}) || '%'
                        </when>
                        <when test='category == "c"'>
                            AND UPPER(po_content) LIKE '%' || UPPER(#{keyword}) || '%'
                        </when>
                        <when test='category == "tc"'>
                            AND (UPPER(po_title) LIKE '%' || UPPER(#{keyword}) || '%' 
                                 OR UPPER(po_content) LIKE '%' || UPPER(#{keyword}) || '%')
                        </when>
                        <when test='category == "a"'>
                            AND UPPER(po_author) LIKE '%' || UPPER(#{keyword}) || '%'
                        </when>
                    </choose>
                </if>
            </trim>
        </where>
    </select>
    
    <!-- 로그인된 아이디로 작성된 글 목록 조회 -->
    <select id="readByMeUsername" resultType="Post">
        select *
		from post
		where po_author = #{meUsername}
    </select>
    
    <!-- 관리자용 전체글 목록 원하는 수대로 가져오기 -->
    <select id="readVariable" resultType="Post">
	    select po_id, po_title, po_content, po_author, po_created_time, po_modified_time, pc_id, po_views from
	        (
		    select rownum rno, po_id, po_title, po_content, po_author, po_created_time, po_modified_time, pc_id, po_views
		    from (select * from post order by po_created_time desc)
		    where po_id > 0 and rownum > 0 and rownum <![CDATA[<]]>= #{maxPostNum}
	        )
	    where rno >= #{minPostNum} and rno <![CDATA[<]]>= #{maxPostNum}
    </select>
    
    <!-- 일반, 스폰서용 작성글 원하는 수대로 가져오기 -->
    <select id="readVariableByMeUsername" resultType="Post">
        select po_id, po_title, po_content, po_author, po_created_time, po_modified_time, pc_id, po_views from
            (
            select rownum rno, po_id, po_title, po_content, po_author, po_created_time, po_modified_time, pc_id, po_views
            from (select * from post where po_author = #{meUsername} order by po_created_time desc)
            where po_id > 0 and rownum > 0 and rownum <![CDATA[<]]>= #{maxPostNum}
            )
        where rno >= #{minPostNum} and rno <![CDATA[<]]>= #{maxPostNum}
    </select>
    
    <!-- 전체 글 갯수 세기 -->
    <select id="countAllPosts">
        select count(*) from post
    </select>
    
    <!-- 로그인한 아이디가 등록한 글 갯수 세기 -->
    <select id="countPostsByMeUsername">
        select count(*) from post where po_author = #{meUsername}
    </select>
    
<!-- 희성 작성 끝 -->


</mapper>